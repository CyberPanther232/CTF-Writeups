
# TryHackMe Write-up: Stolen Mount

---

### **Room Details**
* **Name:** Stolen Mount
* **URL:** https://tryhackme.com/room/hfb1stolenmount
* **Difficulty:** Easy

---

## Synopsis

This was an easy 30 minute room that requires knowledge of Wireshark and NFS to complete.
*(Example: This challenge involved exploiting a web application vulnerability to gain an initial foothold, followed by escalating privileges by taking advantage of misconfigured SUID binaries on the system.)*

---

## 1. Use Wireshark to Discover Stolen Data

## Filtering

First, as with most packet analysis, I applied a filter to only show NFS traffic. I filter via NFS because of the description in the room stating that this data was stolen from an NFS Server.


After applying the 'nfs' filter, I then began to look into the packets to see if I could identify any particular strings that would show evidence of the "classified" data.

I noticed in some of the strings that the NFS is a Linux Server and that the "attacker" was trying to gain access to the NFS share to extract the secret data. Which they ultimately accomplished. In the screenshot below you can see the attacker is using Kali Linux to connect to the server which is using NFSv4.2.

## Following TCP Stream

Once I gathered some preliminary information I then decided to follow the TCP stream of the entire session which was created. After scrolling through the stream I found some interesting strings.

```
Strings Found:
- creds.txt
- desktop
- Archive Password
- ******************************** (md5) - Hidden because I can't make it too eazy ;)
```
It appears that I found a password hash for an archive file. I made not of this hash and continued my investigation and I stumbled upon a string "hidden_stash.zip"

This is probably the archive that has the secret contents. I should probably crack the hash and get the password in case I need to extract and view the archive.

Once I scrolled down a little further I saw a "secrets.png". This must be the "classified data!

## 2. Extracting the Data from Wireshark

Now that I know the exact file I'm looking for, the archive it's stored in, and have the hash I need to extract the data!

In order to extract this data from Wireshark I first needed to change the TCP stream format from ASCII to raw. This is so I can save the data transfered during the NFS session and potentially extract the "hidden_stash.zip". After changing it to raw I just clicked the "Save As" option in the bottom right corner of the Follow TCP Stream window and saved the data as "data.nfs"

Once I extracted the raw data I ran the file command to identify the file type as you can see in the screenshot below. Once I saw the "comressed" keyword I knew that I could potentially decompress or unzip the data. I did and was prompted to enter a password for "secrets.png"!

## 3. Crack the Hash!

Now that I knew I needed the password from the hash found previously, I went online to **https://crackstation.net** to try and crack the hash! 
```

Password found: Wouldn't you like to know ;)

```

I have cracked the hash and got the password! Now time to enter the password and unzip this archive!

## 4. Unzip and Extract the Data from the Image!

I whipped out my phone and scanned the QR code show in the "secrets.png" file. It's below!

And then I typed out the flag to get my answer!

---

Summary:

* **NFS is Not Secure** - This protocol does not have encryption meaning anyone can read the data in a session if they are listening.
* **What did you learn?** Using file sharing with secure passwords and encrypted data transmission is a must. Also, I learned that NFS session data can be saved to recover downloaded and transferred files.
* **How could this be prevented?** By updating to the latest version of NFS or just using a different file sharing platform with encryption and use better passwords.

---

## Tools Used

* **Nmap:** Port scanning and service enumeration.
* **GoBuster:** Web directory brute-forcing.
* **Netcat:** Setting up a listener for the reverse shell.
* **[Add any other tools you used]**
